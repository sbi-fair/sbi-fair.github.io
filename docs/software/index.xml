<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Software on SBI-FAIR</title><link>/docs/software/</link><description>Recent content in Software on SBI-FAIR</description><generator>Hugo -- gohugo.io</generator><language>en</language><atom:link href="/docs/software/index.xml" rel="self" type="application/rss+xml"/><item><title>cloudmesh</title><link>/docs/software/cloudmesh/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/software/cloudmesh/</guid><description>Overview Cloudmesh allows the creation of an extensible commandline and commandshell tool based internally on a number of python APIs that can be loaded conveniently through plugins.
Plugins useful for this effort include
cloudmesh-vpn1 &amp;ndash; a convenient way to configure VPN cloudmesh-common2 &amp;ndash; useful common libraries including a StopWatch for benchmarking cloudmesh-cmd53 &amp;ndash; a plugin manager that allows plugins to be integrated as commandline tool or command shell cloudmesh-ee4 &amp;ndash; A pluging to create AI grid searchs using LSF and SLURM jobs cloudmesh-cc5 &amp;ndash; A plugin to allow benchmarks to be run in coordination on heterogeneous compute resources and multiple clusters cloudmesh-apptainer6 &amp;ndash; mangae apptainers via a Python API Cloudmesh has over 100 plugins coordinated at http://github.</description></item><item><title>sabath</title><link>/docs/software/sabath/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/software/sabath/</guid><description>Introduction SABATH provides benchmarking infrastructure for evaluating scientific ML/AI models. It contains support for scientific machine learning surrogates from external repositories such as SciML-Bench.
The software dependences are explicitly exposed in the surrogate model definition, which allows the use of advanced optimization, communication, and hardware features. For example, distributed, multi-GPU training may be enabled with Horovod. Surrogate models may be implemented using TensorFlow, PyTorch, or MXNET frameworks.
Models Models are collected so far at</description></item></channel></rss>